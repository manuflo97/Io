# IMPORT STATEMENTS ############################################################
################################################################################
import tudatpy.kernel.numerical_simulation.propagation_setup.integrator
from tudatpy.kernel.numerical_simulation.propagation import get_state_of_bodies
from tudatpy.util import result2array
from tudatpy.kernel import constants
from tudatpy.kernel import numerical_simulation
from tudatpy.kernel.interface import spice
from tudatpy.kernel.numerical_simulation import environment_setup
from tudatpy.kernel.numerical_simulation import propagation_setup, propagation
import numpy as np
import json
import pandas as pd
from pandas import DataFrame

################################################################################
# GENERAL SIMULATION SETUP #####################################################
################################################################################

# Load spice kernels.
spice.load_standard_kernels()

# Set simulation start epoch.
simulation_start_epoch = 1.0e7

# Set simulation end epoch.
simulation_end_epoch = 1.0e7 + 5.0 * constants.JULIAN_YEAR

################################################################################
# SETUP ENVIRONMENT ############################################################
################################################################################

# Define bodies in simulation.
bodies_to_create = bodies_to_propagate = ["Sun","Io","Jupiter"]#,"Europa","Ganymede","Callisto"]#,"Earth","Moon"]

# Create bodies in simulation.
global_frame_origin = "SSB"
global_frame_orientation = "ECLIPJ2000"
body_settings = environment_setup.get_default_body_settings(bodies_to_create)
body_system = environment_setup.create_system_of_bodies(body_settings)

################################################################################
# SETUP PROPAGATION ############################################################
################################################################################

results = {}

for propagation_variant in ["barycentric", "hierarchical"]:

    ############################################################################
    # SETUP PROPAGATION : CREATE ACCELERATION MODELS ###########################
    ############################################################################

    # Create barycentric body settings
    acceleration_dict = {}
    for body_i in bodies_to_create:
        current_accelerations = {}
        for body_j in bodies_to_create:
            if body_i != body_j:
                current_accelerations[body_j] = [
                    propagation_setup.acceleration.point_mass_gravity()
                ]
        acceleration_dict[body_i] = current_accelerations

    # Barycentric propagation.
    if propagation_variant == "barycentric":
        central_bodies = ["SSB"] * len(bodies_to_create)

    # Hierarchical parent body propagation.
    elif propagation_variant == "hierarchical":
        central_bodies = []
        for body_name in bodies_to_create:
            if body_name == "Io":
                central_bodies.append("Jupiter")
            elif body_name == "Europa":
                central_bodies.append("Jupiter")
            elif body_name == "Ganymede":
                central_bodies.append("Jupiter")
            elif body_name == "Callisto":
                central_bodies.append("Jupiter")
            elif body_name == "Moon":
                central_bodies.append("Earth")
            elif body_name == "Sun":
                central_bodies.append("SSB")
            else:
                central_bodies.append("Sun")

    # Convert acceleration mappings into acceleration models.
    acceleration_models = propagation_setup.create_acceleration_models(
        body_system=body_system,
        selected_acceleration_per_body=acceleration_dict,
        bodies_to_propagate=bodies_to_propagate,
        central_bodies=central_bodies
    )

    ############################################################################
    # SETUP PROPAGATION : PROPAGATION SETTINGS #################################
    ############################################################################

    # Get system initial state.
    system_initial_state = propagation.get_initial_state_of_bodies(
        bodies_to_propagate=bodies_to_propagate,
        central_bodies=central_bodies,
        body_system=body_system,
        initial_time=simulation_start_epoch,
    )
    # Create termination settings.
    termination_condition = propagation_setup.propagator.time_termination(simulation_end_epoch)

    dependent_variables_to_save = [
        propagation_setup.dependent_variable.keplerian_state("Io", "Jupiter")
    ]

    # Create propagation settings.
    propagator_settings = propagation_setup.propagator.translational(
        central_bodies,
        acceleration_models,
        bodies_to_propagate,
        system_initial_state,
        termination_condition,
        output_variables=dependent_variables_to_save
    )
    # Create numerical integrator settings.
   # fixed_step_size = 1800.0
    integrator_settings = propagation_setup.integrator.runge_kutta_variable_step_size(simulation_start_epoch,900,
                                                                                      tudatpy.kernel.numerical_simulation.propagation_setup.integrator.rkf_78,
                                                                                      12,1800,
                                                                                      1e-10,1e-10,
                                                                                      1,False,0.8,
                                                                                      4.0,0.1,True)
 #       simulation_start_epoch, fixed_step_size
  #  )

    ############################################################################
    # PROPAGATE ################################################################
    ############################################################################

    # Instantiate the dynamics simulator.
    dynamics_simulator = numerical_simulation.SingleArcSimulator(
        body_system, integrator_settings, propagator_settings,print_dependent_variable_data=True)

    # Propagate and store results to outer loop results dictionary.
    results[propagation_variant] = dynamics_simulator.state_history
    # Dependent variables
    dep_var = dynamics_simulator.dependent_variable_history

################################################################################
# VISUALISATION / OUTPUT / PRELIMINARY ANALYSIS ################################
################################################################################

# After propagation, the state evolution is visualised by plotting the
#  trajectory of each body over the propagation time.
# Note that in the hierarchical case the raw output of the propagation cannot be
#  plotted in the one figure, since some bodies have their propagated state
#  defined w.r.t different bodies. The results of the hierarchical propagation
#  are therefore split over multiple figures.

from matplotlib import pyplot as plt


# auxiliary function for plotting multi-body state history and splitting hierarchical states
def plot_multi_body_system_state_history(system_state_history_array, propagated_bodies, hierarchical=False):

    if hierarchical:

        fig1 = plt.figure(figsize=(8, 24))  #figsize=plt.figaspect(3))

        ax1 = fig1.add_subplot(111, projection='3d')
        ax1.set_title(f'Trajectory of Io w.r.t. Jupiter')
        ax1.scatter(0, 0, 0, marker='x', label="Jupiter")


        for i, body in enumerate(propagated_bodies):

            if body == "Io":
                ax1.plot(system_state_history_array[:, 6 * i + 1], system_state_history_array[:, 6 * i + 2],
                         system_state_history_array[:, 6 * i + 3],
                         label=body)
            elif body == "Europa":
                ax1.plot(system_state_history_array[:, 6 * i + 1], system_state_history_array[:, 6 * i + 2],
                         system_state_history_array[:, 6 * i + 3],
                         label=body)
            elif body == "Ganymede":
                ax1.plot(system_state_history_array[:, 6 * i + 1], system_state_history_array[:, 6 * i + 2],
                         system_state_history_array[:, 6 * i + 3],
                         label=body)
            elif body == "Callisto":
                ax1.plot(system_state_history_array[:, 6 * i + 1], system_state_history_array[:, 6 * i + 2],
                         system_state_history_array[:, 6 * i + 3],
                         label=body)

        axs = [ax1]
        ax_lims = [-5.0E8, 5.0E8]  # equal axis limit per subplot, [m]

        for ax, ax_lim in zip(axs, ax_lims):
            ax.legend()
            ax.set_xlabel('x [m]')
            ax.set_xlim(ax_lim)
            ax.set_ylabel('y [m]')
            ax.set_ylim(ax_lim)
            ax.set_zlabel('z [m]')
            ax.set_zlim(ax_lim)



    else:

        fig1 = plt.figure(figsize=(8, 8))
        ax1 = fig1.add_subplot(111, projection='3d')
        ax1.set_title(f'System state evolution of all bodies w.r.t SSB.')


        for i, body in enumerate(propagated_bodies):
            ax1.plot(system_state_history_array[:, 6 * i + 1], system_state_history_array[:, 6 * i + 2],
                     system_state_history_array[:, 6 * i + 3],
                     label=body)
            ax1.scatter(system_state_history_array[0, 6 * i + 1], system_state_history_array[0, 6 * i + 2],
                        system_state_history_array[0, 6 * i + 3],
                        marker='x')

        ax1.scatter(0, 0, 0, marker='x', label="SSB", color='black')
        ax1.legend()
        ax1.set_xlabel('x [m]')
        ax1.set_xlim([-5.5E11, 5.5E11])
        ax1.set_ylabel('y [m]')
        ax1.set_ylim([-5.5E11, 5.5E11])
        ax1.set_zlabel('z [m]')
        ax1.set_zlim([-5.5E11, 5.5E11])

    return fig1

# convert state history dictionaries to arrays for easier processing
barycentric_system_state_array = result2array(results['barycentric'])
hierarchical_system_state_array = result2array(results['hierarchical'])

# plot system evolution
figA = plot_multi_body_system_state_history(barycentric_system_state_array, bodies_to_propagate)
figB = plot_multi_body_system_state_history(hierarchical_system_state_array, bodies_to_propagate, hierarchical=True)
plt.tight_layout()
#plt.show()

#stateio=[]
#statejup=[]
#times=barycentric_system_state_array[:,0]
#for i, body in enumerate(bodies_to_propagate):
#    if body == "Jupiter":
 ##       for t in times:
   #         barycentric_jupiter_state = spice.get_body_cartesian_state_at_epoch(target_body_name="Jupiter",
    #                                                                           observer_body_name="SSB",
     #                                                                          reference_frame_name="ECLIPJ2000",
      #                                                                         aberration_corrections="NONE",
    ##                                                                           ephemeris_time=t)
      #      statejup.append(barycentric_jupiter_state)
    #elif body == "Io":
     #   for t in times:
      #      barycentric_io_state = spice.get_body_cartesian_state_at_epoch(target_body_name="Io",
       #                                                                        observer_body_name="Jupiter",
        #                                                                       reference_frame_name="ECLIPJ2000",
         #                                                                      aberration_corrections="NONE",
          #                                                               ephemeris_time=t)
           # stateio.append(barycentric_io_state)

df_array=pd.DataFrame(data=barycentric_system_state_array)

dep_var_array = result2array(dep_var)
times = dep_var_array[:,0]
time_step = times-1.0e7
time_day = time_step / (3600*24)

keplerian_el = pd.DataFrame(data=dep_var_array, columns ="t a e i RAAN Argument_pericenter true_anomaly".split())


fig, ((ax2, ax3), (ax4, ax5)) = plt.subplots(2, 2, figsize=(9, 12))
fig.suptitle('Evolution of Kepler elements of Io during the propagation.')

#SEMI MAJOR AXIS
semi_major_axis = keplerian_el.loc[:,"a"]
ax2.plot(time_day, semi_major_axis)
ax2.set_ylabel('Semi-major axis [m]')
ax2.set_ylim([410000*1e3, 430000*1e3])


#ECCENTRICITY
eccentricity = keplerian_el.loc[:,"e"]
ax3.plot(time_day, eccentricity)
ax3.set_ylabel('Eccentricity [-]')

#INCLINATION
inclination = np.rad2deg(keplerian_el.loc[:,"i"])
ax4.plot(time_day, inclination)
ax4.set_ylabel('inclination [deg]')
ax4.set_ylim(2.201, 2.203)

#RAAN
raan = np.rad2deg(keplerian_el.loc[:,"RAAN"])
ax5.plot(time_day, raan)
ax5.set_ylabel('RAAN [deg]')

for ax in fig.get_axes():
    ax.set_xlabel('Time [day]')
    ax.set_xlim([min(time_day), max(time_day)])
    ax.grid()
    ax.relim()
    ax.autoscale_view()
plt.tight_layout()
plt.show()

